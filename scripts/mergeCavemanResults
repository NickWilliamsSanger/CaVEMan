#!/usr/bin/perl

########## LICENSE ##########
# Copyright (c) 2014-2015 Genome Research Ltd.
#
# Author: Cancer Genome Project cgpit@sanger.ac.uk
#
# This file is part of CaVEMan.
#
# CaVEMan is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#    1. The usage of a range of years within a copyright statement contained within
#    this distribution should be interpreted as being equivalent to a list of years
#    including the first and last year specified and all consecutive years between
#    them. For example, a copyright statement that reads ‘Copyright (c) 2005, 2007-
#    2009, 2011-2012’ should be interpreted as being identical to a statement that
#    reads ‘Copyright (c) 2005, 2007, 2008, 2009, 2011, 2012’ and a copyright
#    statement that reads ‘Copyright (c) 2005-2012’ should be interpreted as being
#    identical to a statement that reads ‘Copyright (c) 2005, 2006, 2007, 2008,
#    2009, 2010, 2011, 2012’."
#
#
###########################

use strict;
use warnings FATAL=>'all';

use Getopt::Long;
use Pod::Usage qw(pod2usage);
use Carp;

{
	my $options = setup();

	my ($splitSectcounts,$sects) = get_line_count_from_splitlist($options->{'s'});

	if($splitSectcounts != scalar(@{$options->{'files'}})){
	  croak("Expected $splitSectcounts files but got ".scalar(@{$options->{'files'}}).".");
	}

	my $OUT;
	open($OUT,'>',$options->{'o'}.".tmp") or die("Error opening output file $options->{o}.tmp for write: $!\n");
		#Iterate through each file
		my $have_head = 0;
		my @head ;

		#Do the header checks first;
		foreach my $filename(@{$options->{'files'}}){
			#open file
			my $IN;
			open($IN, '<', $filename) or die("Error trying to open '$filename' for read: $!\n");
				my @tmp_head;
				while(<$IN>){
					my $line = $_;
					if($line =~ m/^#/){ #Header line
						if($have_head == 0){
							push (@head, $line);
						}else{ #We've already loaded in a header so this is a new file that needs a header check
							#Check our header matched that previously passed in.
							push (@tmp_head, $line);
						}
					}elsif($line !~ m/^#/){
						#Reached end of header.
						if($have_head == 0){
							$have_head = 1;
						}else{ #Compare this header to the header to be printed.
							for(my $i=0; $i<scalar(@tmp_head); $i++){
								next if($tmp_head[$i] =~ m/fileDate/);
								if($tmp_head[$i] ne $head[$i] ){
									croak("Header mismatch found at line ",($i+1),
													" of header:\n",$tmp_head[$i]," ne ",$head[$i],"\n");
								}
							}
						}
						last;
					}
				}
			$have_head = 1 if($have_head == 0); #in case we hit a file containing only the header first.
			close($IN) or croak ("Error closing file '$filename' when checking header: $!");
		}

		warn "".scalar(@head)." header lines\n";

		#Print header to file.
		for(my $i=0; $i<scalar(@head); $i++){
			print $OUT $head[$i];
		}

		#Load in lines from files.
		foreach my $filename(@{$options->{'files'}}){
			#open file

			#Get the start and stop from the filename and check off in the sections list.
		  if($filename =~ m/\/([^\/]+)\/(\d+)_(\d+)\./){
        my $key = $2."_".$3;
        $sects->{$1}->{$key} = 0;
		  }else{
		    croak("Error detecting start and stop from CaVEMan output file $filename.");
		  }

			my $IN;
			open($IN, '<', $filename) or die("Error trying to open $filename for read: $!\n");
				while(<$IN>){
					my $line = $_;
					if($line !~ m/^#/){
						print $OUT $line;
					}
				}
			close($IN);
		}
	close ($OUT);

	my @missed_files = ();
	foreach my $chr(keys %$sects){
	  foreach my $section(keys %{$sects->{$chr}}){
      if($sects->{$chr}->{$section}){
        my $out = "$chr:$section";
        push @missed_files, $out;
      }
	  }
	}

	if(scalar(@missed_files)){
	  croak("Sections ".join( " ", @missed_files)." weren't merged. Something has gone wrong.");
	}

	# We've written a tmp file with all results, now take the header,
	# and sort the remaining entries into the proper output file.

	# Get the header into the file.
	my $head_cmd = "grep -e '^#' ".$options->{'o'}.".tmp > ".$options->{'o'};
	`$head_cmd`;

	# Get the non header lines and sort accordingly
	my $non_head_sort_cmd = "grep -ve '^#' ".$options->{'o'}.".tmp | sort -k1,1 -k2,2n >> ".$options->{'o'};
	`$non_head_sort_cmd`;

	# delete the tmp file
	unlink($options->{'o'}.".tmp") or die("ERROR: Couldn't delete temporary output file ".$options->{'o'}.".tmp".":$!");
}

sub get_line_count_from_splitlist{
  my ($file) = @_;
  my $FH;
  my $line = 0;
  my $splits;
  open($FH, '<', $file) or croak("Error trying to open splitlist $file: $!");
    while(<$FH>){
      $line++;
      my $line = $_;
      chomp($line);
      my ($chr,$start,$stop) = split(/\s+/,$line);
      my $key = "".($start+1)."_$stop";
      $splits->{$chr}->{$key} = 1;
    }
  close($FH) or croak("Error trying to close splitlist $file: $!");
  return ($line,$splits);
}

sub setup{
	my %opts;
  	GetOptions( 'h|help' => \$opts{'h'},
					'o|output=s' => \$opts{'o'},
					's|splitlist=a' => \$opts{'s'},
  	) or pod2usage(2);

	if($opts{'h'}){
  		pod2usage(0);
	}

	pod2usage(-msg  => "\nERROR: Incorrect parameters.\n", -verbose => 2, -output => \*STDERR ) unless($opts{'o'} && $opts{'s'});

	$opts{'files'} = \@ARGV;

	return \%opts;
}

__END__

=head1 NAME

mergeCavemanResults - Perl script to merge VCF or BED format results files output by CaVEMan split jobs
                      into a single results file.
                      For example mergeCavemanResults -o muts.vcf -s splitList.txt results/*/*.muts.vcf

=head1 SYNOPSIS

mergeCavemanResults [options] [file(s)...]

Required parameters:
    --output       -o   File to output result to.
    --splitlist    -s   File containing list of split sections

Other:
    --help         -h   Brief help message.

=head1 DESCRIPTION

B<mergeCavemanResults> Will merge CaVEMan split output files into a single result file for the type.

=cut
